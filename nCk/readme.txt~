Problem Statement :

	Input n and k.
	Output nCk (mod (1e9+7)).

CPP files :

	nCk.cpp : No use of OpenMP. Memory required is O(max_n*max_k).
	nCk2.cpp : No use of OpenMP. Memory required is O(max_k).
	nCk_par1.cpp : Inner for in nCk.cpp parallelized using for directive.
	nCk2_par1.cpp : Both inner fors in nCk2.cpp parallelized using for directive.

Other files :

	0.in, 1.in : Small Input Files
	a0.in, a1.in : Large Input Files

Real Times :

	nCk.cpp :: a0.in : 0.058 sec :: a1.in : 0.101 sec
	nCk_par1.cpp :: a0.in : 0.058 sec :: a1.in : 0.081 sec
	nCk2.cpp :: a0.in : 0.056 sec :: a1.in : 0.110 sec
	nCk2_par1.cpp :: a0.in : 0.049 sec :: a1.in : 0.066 sec

Notes :

	nCk.cpp and nCk_par1.cpp :
		For a0.in, the bottleneck is the declaration of array C and not the for loop, since k is much less than max_k.
		For a1.in, the bottleneck is declaration of array C as well as the for loop, since both n and k are very close to max_n and max_k.
		The parallelization speeds up the for loop.
		Thus, the effect of the parallelization is apparent in a1.in but not in a0.in.
	
	nCk2.cpp and nCk2_par1.cpp :
		Since memory required is O(k), the only bottleneck now is the for loop.
		Thus, the effect of parallelization is apparent both in a0.in and a1.in.
